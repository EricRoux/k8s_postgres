{{- if .Values.job.enabled -}}
{{ $secretName := (include "postgres.secretName" .)}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "postgres.jobName" . }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
spec:
  template:
    metadata:
      name: {{ include "postgres.jobName" . }}
      labels:
        {{- include "postgres.selectorLabels" . | nindent 8 }}
    spec:
      containers:
      - name: {{ include "postgres.jobName" . }}
        image: {{ .Values.image.repository -}} : {{- .Values.image.tag }}
        command:
          - bash
          - -ec
          - >-
            PGPASSWORD=$POSTGRES_PASSWORD psql -w -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h "$POSTGRES_HOST" 
          {{- range $elm := (.Values.job.init.databases) }}
            -c "create database {{ printf "$DB_%s" $elm.name}};"
          {{- end }} 
          {{- range $elm := (.Values.job.init.users) }}
            -c "create user {{ printf "$USER_%s with encrypted password '$PASSWORD_%s'" $elm.user $elm.user}};" 
          {{- end }} 
          {{- range $elm := (.Values.job.init.databases) }}
            -c "grant all privileges on database {{ printf "$DB_%s to $USER_%s" $elm.name $elm.user}};"
          {{- end -}}
            ;
          {{- range $elm := (.Values.job.init.databases) }}
            {{- if $elm.schema }}
            PGPASSWORD=$POSTGRES_PASSWORD psql -w -U "$POSTGRES_USER" -d {{ printf "$DB_%s" $elm.name }} -h "$POSTGRES_HOST"
            -c "{{ printf "create schema $SCHEMA_%s AUTHORIZATION $USER_%s" $elm.schema $elm.user }};";
            {{- end }}
          {{- end }} 
            
        env:
          - name: POSTGRES_HOST
            value: '{{ include "postgres.serviceName" . }}'
          - name: POSTGRES_DB
            value: "{{ .Values.dataBase.coreDatabase }}"
          - name: POSTGRES_USER
            value: "{{ .Values.dataBase.user }}"
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ $secretName }}
                key: postgresql-password
          {{- range $elm := (.Values.job.init.users) }}
          - name: {{ printf "USER_%s" $elm.user }}
            value: {{ printf "%s" $elm.user }}
          - name: {{ printf "PASSWORD_%s" $elm.user }}
            valueFrom:
              secretKeyRef:
                name: {{ $secretName }}
                key: {{ printf "%s" $elm.user}}
          {{- end }}
          {{- range $elm := (.Values.job.init.databases) }}
          - name: {{ printf "DB_%s" $elm.name }}
            value: {{ printf "%s" $elm.name }}
          {{- if $elm.schema }}
          - name: {{ printf "SCHEMA_%s" $elm.schema }}
            value: {{ printf "%s" $elm.schema }}
          {{- end }}
          {{- end }}        
          {{- if .Values.timeZone }}
          - name: TZ
            value: {{ .Values.timeZone }}
          {{- end }}
      restartPolicy: OnFailure
      dnsPolicy: ClusterFirst
{{- end -}}